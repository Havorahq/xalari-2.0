/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AgreementFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createNewFixedRateAgreement"
      | "createNewPayAsYouGoAgreement"
      | "fixedRateAgreements"
      | "getNumberOfFixedRateAgreements"
      | "getNumberOfPayAsYouGoAgreements"
      | "payAsYouGoAgreements"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FixedRateAgreementDeployed"
      | "PayAsYoGoAgreementDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createNewFixedRateAgreement",
    values: [string, string, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewPayAsYouGoAgreement",
    values: [string, string, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedRateAgreements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfFixedRateAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfPayAsYouGoAgreements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payAsYouGoAgreements",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewFixedRateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewPayAsYouGoAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedRateAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfFixedRateAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfPayAsYouGoAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payAsYouGoAgreements",
    data: BytesLike
  ): Result;
}

export namespace FixedRateAgreementDeployedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayAsYoGoAgreementDeployedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgreementFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AgreementFactory;
  waitForDeployment(): Promise<this>;

  interface: AgreementFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createNewFixedRateAgreement: TypedContractMethod<
    [
      _employerId: string,
      _employeeId: string,
      _employerAddress: AddressLike,
      _currency: AddressLike,
      _fixedPayment: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  createNewPayAsYouGoAgreement: TypedContractMethod<
    [
      _employerId: string,
      _employeeId: string,
      _employerAddress: AddressLike,
      _currency: AddressLike,
      _monthlyPayment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fixedRateAgreements: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getNumberOfFixedRateAgreements: TypedContractMethod<[], [bigint], "view">;

  getNumberOfPayAsYouGoAgreements: TypedContractMethod<[], [bigint], "view">;

  payAsYouGoAgreements: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createNewFixedRateAgreement"
  ): TypedContractMethod<
    [
      _employerId: string,
      _employeeId: string,
      _employerAddress: AddressLike,
      _currency: AddressLike,
      _fixedPayment: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createNewPayAsYouGoAgreement"
  ): TypedContractMethod<
    [
      _employerId: string,
      _employeeId: string,
      _employerAddress: AddressLike,
      _currency: AddressLike,
      _monthlyPayment: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fixedRateAgreements"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getNumberOfFixedRateAgreements"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfPayAsYouGoAgreements"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payAsYouGoAgreements"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "FixedRateAgreementDeployed"
  ): TypedContractEvent<
    FixedRateAgreementDeployedEvent.InputTuple,
    FixedRateAgreementDeployedEvent.OutputTuple,
    FixedRateAgreementDeployedEvent.OutputObject
  >;
  getEvent(
    key: "PayAsYoGoAgreementDeployed"
  ): TypedContractEvent<
    PayAsYoGoAgreementDeployedEvent.InputTuple,
    PayAsYoGoAgreementDeployedEvent.OutputTuple,
    PayAsYoGoAgreementDeployedEvent.OutputObject
  >;

  filters: {
    "FixedRateAgreementDeployed(address)": TypedContractEvent<
      FixedRateAgreementDeployedEvent.InputTuple,
      FixedRateAgreementDeployedEvent.OutputTuple,
      FixedRateAgreementDeployedEvent.OutputObject
    >;
    FixedRateAgreementDeployed: TypedContractEvent<
      FixedRateAgreementDeployedEvent.InputTuple,
      FixedRateAgreementDeployedEvent.OutputTuple,
      FixedRateAgreementDeployedEvent.OutputObject
    >;

    "PayAsYoGoAgreementDeployed(address)": TypedContractEvent<
      PayAsYoGoAgreementDeployedEvent.InputTuple,
      PayAsYoGoAgreementDeployedEvent.OutputTuple,
      PayAsYoGoAgreementDeployedEvent.OutputObject
    >;
    PayAsYoGoAgreementDeployed: TypedContractEvent<
      PayAsYoGoAgreementDeployedEvent.InputTuple,
      PayAsYoGoAgreementDeployedEvent.OutputTuple,
      PayAsYoGoAgreementDeployedEvent.OutputObject
    >;
  };
}
